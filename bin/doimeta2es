#!/usr/bin/env ruby

require 'thor'
require 'dotenv/load'
require_relative File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib' , 'doimeta2es'))

module DOIMeta2ES
  class CLI < Thor

    class_option :verbosity, type: :numeric, default: 0, desc: 'Show verbose output 0=none, 1=limited, 2=full Elasticsearch output'

    desc "index [FILENAME [FILENAME]]", "Index metadata from files on disk or from stdin"
    long_desc <<-LONGDESC
    Parses and indexes Unixref XML or Citeproc JSON DOI metadata files

    If --stdin is supplied, input is read from STDIN.
    LONGDESC

    option :batchsize, required: false, type: :numeric, default: 100, desc: 'Batch size for Elasticsearch bulk operations'
    option :stdin, required: false, type: :boolean, default: false, desc: 'Read from STDIN'
    option :readdir, required: false, type: :string, desc: 'Recursively search directory for metadata files to index'
    def index(*files)
      DOIMeta2ES::Runner.new(es_client(options[:verbosity] > 1)).index(options, *files)
    end

    desc "lookup --doi=DOI", "Lookup metadata for a DOI identifier"
    long_desc <<-LONGDESC
    Performs a metadata lookup for the DOI provided by --doi=<identifier> in the format
    requested by --type=<type>
    If --index is specified, the output from Elasticsearch will be printed, otherwise the returned metadata is displayed
    LONGDESC

    option :doi, required: false, type: :string, desc: 'Requested DOI'
    option :file, required: false, type: :string, desc: 'Read DOIs from file'
    option :save, required: false, type: :boolean, default: true, desc: 'Save metadata to files when doing batch --file, --no-save is useless without --index'
    option :outputdir, required: false, type: :string, default: '/tmp/doimeta', desc: 'Output directory for batch metadata lookups with --file'
    option :format, required: false, type: :string, default: 'json'
    option :index, type: :boolean, default: false, desc: 'Index metadata in Elasticsearch and print Elasticsearch JSON output'
    def lookup()
      DOIMeta2ES::Runner.new(es_client(options[:verbosity] > 1)).lookup(options)
    end

    desc "setup", "Create or update indices and mappings in Elasticsearch"
    long_desc <<-LONGDESC
    Create or update indices and mappings in Elasticsearch
    LONGDESC

    option :index, required: false, type: :string, desc: 'Index to setup, defaults to all'
    def setup
      index_defs_path = File.dirname(__FILE__) + '/../index-defs'
      DOIMeta2ES::Runner.new(es_client(options[:verbosity] > 1)).setup(index_defs_path, options)
    end

    default_command :index

    private
    def es_client(verbose=false)
      Elasticsearch::Client.new url: (ENV['ELASTICSEARCH_URL'] || 'http://localhost:9200'), log: verbose
    end
  end
end

DOIMeta2ES::CLI.start(ARGV)
