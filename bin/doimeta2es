#!/usr/bin/env ruby

require 'thor'
require 'dotenv/load'
require 'json'
require_relative File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib' , 'doimeta2es'))

module DOIMeta2ES
  class CLI < Thor
    INDEX_DEFS = File.dirname(__FILE__) + '/../index-defs'

    class_option :verbose, type: :boolean, default: false, desc: 'Show verbose output from Elasticsearch'

    desc "Index metadata", "Index metadata from files on disk or from stdin"
    long_desc <<-LONGDESC
    Parses and indexes Unixref XML or Citeproc JSON DOI metadata files

    If --stdin is supplied, input is read from STDIN.
    LONGDESC

    option :batchsize, required: false, type: :numeric, default: 100, desc: 'Batch size for Elasticsearch bulk operations'
    option :stdin, required: false, type: :boolean, default: false, desc: 'Read from STDIN'

    def index(*files)
      es = es_client options[:verbose]
      client = DOIMeta2ES::Transport.new es

      if options[:stdin]
        result = client.index $stdin.read
      else
        report = client.index_batch files, options[:batchsize].to_i
        puts report.inspect
      end

    end

    desc "Lookup a DOI", "Lookup metadata for a DOI identifier"
    long_desc <<-LONGDESC
    Performs a metadata lookup for the DOI provided by --doi=<identifier> in the format
    requested by --type=<type>
    LONGDESC

    option :doi, required: true, type: :string, desc: 'Requested DOI'
    option :format, required: false, type: :string, default: 'json'
    option :index, type: :boolean, default: false, desc: 'Index metadata in Elasticsearch'
    def lookup()
      (formats = {
        'json' => SimpleDOI::CITEPROC_JSON,
        'xml' => SimpleDOI::UNIXREF_XML
      }).default = SimpleDOI::CITEPROC_JSON
      raise ArgumentError.new("--format must be one of #{formats.keys.join(', ')}") unless formats.keys.include?(options[:format])

      doi = SimpleDOI::DOI.new(options[:doi].strip)
      doi.lookup formats[options[:format]]
      # Dump the returned string unless we will directly index it
      puts doi.body unless (doi.body.strip.empty? || options[:index]) rescue nil

      if options[:index]
        es = es_client options[:verbose]
        client = DOIMeta2ES::Transport.new es
        # Dump the output from Elasticsearch
        puts client.index(doi.body).to_json
      end
    end

    desc "Setup indices and mappings", "Create or update indices and mappings in Elasticsearch"
    long_desc <<-LONGDESC
    Create or update indices and mappings in Elasticsearch
    LONGDESC

    option :index, required: false, type: :string, desc: 'Index to setup, defaults to all'
    def setup
      es = es_client(options[:verbose])

      if options[:index]
        idxfile = File.expand_path("#{INDEX_DEFS}/index/#{options[:index]}.json")
        mappingfile = File.expand_path("#{INDEX_DEFS}/mapping/#{options[:index]}.json")
        if File.exists? idxfile
          begin
            es.indices.create index: options[:index], body: File.read(idxfile)
          rescue Elasticsearch::Transport::Transport::Errors::BadRequest
          end

          if File.exists? mappingfile
            es.indices.put_mapping index: options[:index], type: options[:index], body: File.read(mappingfile)
          end
        else
          puts "No such index file #{idxfile}"
        end
      else
        Dir.glob("#{INDEX_DEFS}/index/*.json").each do |idxfile|
          begin
            idx = File.basename idxfile, '.json'
            idxfile = File.expand_path(idxfile)
            mappingfile = File.expand_path("#{INDEX_DEFS}/mapping/#{idx}.json")
            begin
              puts "Creating index #{idx} from #{idxfile}"
              es.indices.create index: idx, body: File.read(idxfile)
            rescue Elasticsearch::Transport::Transport::Errors::BadRequest => e
              puts es_error_json e
            end
            puts "Creating mapping #{idx} from #{mappingfile}"
            es.indices.put_mapping index: idx, type: idx, body: File.read(mappingfile)
          rescue StandardError => e
            puts es_error_json e
          end
        end
      end
    end

    default_command :index

    private
    def es_client(verbose=false)
      Elasticsearch::Client.new url: (ENV['ELASTICSEARCH_URL'] || 'http://localhost:9200'), log: verbose
    end

    def es_error_json(e)
      JSON.parse(e.message.split(' ', 2).pop)
    end
  end
end

DOIMeta2ES::CLI.start(ARGV)
