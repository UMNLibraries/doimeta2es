#!/usr/bin/env ruby

require 'thor'
require 'dotenv/load'
require_relative File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib' , 'doimeta2es'))

module DOIMeta2ES
  class CLI < Thor

    class_option :verbose, type: :boolean, default: false, desc: 'Show verbose output from Elasticsearch'

    desc "Index metadata", "Index metadata from files on disk or from stdin"
    long_desc <<-LONGDESC
    Parses and indexes Unixref XML or Citeproc JSON DOI metadata files

    If --stdin is supplied, input is read from STDIN.
    LONGDESC

    option :batchsize, required: false, type: :numeric, default: 100, desc: 'Batch size for Elasticsearch bulk operations'
    option :stdin, required: false, type: :boolean, default: false, desc: 'Read from STDIN'

    def index(*files)
      es = es_client options[:verbose]
      client = DOIMeta2ES::Transport.new es

      if options[:stdin]
        result = client.index $stdin.read
      else
        client.index_batch files, options[:batchsize].to_i
      end

    end

    desc "Lookup a DOI", "Lookup metadata for a DOI identifier"
    long_desc <<-LONGDESC
    Performs a metadata lookup for the DOI provided by --doi=<identifier> in the format
    requested by --type=<type>
    LONGDESC

    option :doi, required: true, type: :string, desc: 'Requested DOI'
    option :format, required: false, type: :string, default: 'json'
    option :index, type: :boolean, default: false, desc: 'Index metadata in Elasticsearch'
    def lookup()
      (formats = {
        'json' => SimpleDOI::CITEPROC_JSON,
        'xml' => SimpleDOI::UNIXREF_XML
      }).default = SimpleDOI::CITEPROC_JSON
      raise ArgumentError.new("--format must be one of #{formats.keys.join(', ')}") unless formats.keys.include?(options[:format])

      doi = SimpleDOI::DOI.new(options[:doi].strip)
      doi.lookup formats[options[:format]]

      if options[:index]
        es = es_client options[:verbose]
        client = DOIMeta2ES::Transport.new es
        client.index doi.body
      end
    end

    default_command :index

    private
    def es_client(verbose=false)
      Elasticsearch::Client.new url: (ENV['ELASTICSEARCH_URL'] || 'http://localhost:9200'), log: verbose
    end
  end
end

DOIMeta2ES::CLI.start(ARGV)
